#+TITLE: Estructura Asociativa Map
* Convención de nombre para funciones que modifican el Estado de Objetos
** Conceptos
  #+BEGIN_QUOTE
  Por convención las funciones que terminan con el símbolo ~!~ de exclamación
  son aquellas que *modifican el estado del objeto* y *devuelven un objeto nuevo*

  Por lo general cuando en la definición de una función utilizamos las funciones ~assoc~ ó ~update~
  ambas *modifican el estado del objeto y devuelven uno nuevo*

  Algunos ejemplos podrían ser
  - ~borrar-mensaje!~
  - ~marcar-mensaje-como-leido!~
  - ~marcar-todos-los-mensajes-como-leidos!~
  #+END_QUOTE
** Ejemplos
*** Ejemplo 1
  #+BEGIN_SRC clojure
    (def saludos {:id 101 :leido? false :texto "saludos amigo"})

    (defn marcar-mensaje-como-leido! [mensaje]
      (assoc mensaje :leido? true))

    (true? (:leido? (marcar-mensaje-como-leido! saludos)))
  #+END_SRC
*** Ejemplo 2
    #+BEGIN_SRC clojure
      (def correo-juan {:mensajes [{:id 100 :leido? true}
                                   {:id 101 :leido? false}
                                   {:id 102 :leido? false}]})

      ;; - update, actualiza el estado de un objeto pasandole una función que lo modifica y devuelve un nuevo objeto
      ;; - al map le pasamos una función anónima con la macro #() que transforma los elementos,
      ;; si cumplen el predicado del IF entonces los transforma con la función assoc modificando la keyword :leido?
      ;; si NO cumplen el predicado del IF entonces devuelve % es decir el mismo elemento sin transformar, dónde el % es propio de la macro #()
      (defn marcar-mensaje-como-leido! [id correo]
        (update correo :mensajes (fn [mensajes]
                                   (map #(if (= id (:id %))
                                           (assoc % :leido? true)
                                           %)
                                        mensajes))))

      (marcar-mensaje-como-leido! 101 correo-juan)
    #+END_SRC
* assoc - Agregar/Modificar entradas en una estructura asociativa Map
** Conceptos
   - ~assoc~ agrega una ó varias entradas de la forma clave-valor a una estructura map
   - ~assoc~ modifica/sobreescribe el valor de una entrada clave-valor si ya existía en la estructura map

   #+BEGIN_QUOTE
   Si usamos ~assoc~ con estructuras map asociativas, se diferencia de las funciones ~conj~ y ~merge~ porque agregamos entradas
   de la forma clave-valor individualmente, es decir las entradas no están contenidas dentro de un
   (TAD, tipo abstracto de dato) como lo es una *Colección*
   #+END_QUOTE
** Ejemplos
*** Ejemplo Básico
    #+BEGIN_SRC clojure
      (def tripulante-riker {:nombre "William" :edad 50})

      ;; devuelve una nueva estructura map con una entrada adicional
      (assoc tripulante-riker :rango "Comandante")

      ;; devuelve una nueva estructura map con una entrada modificada
      (assoc tripulante-riker :edad 51)

      ;; generamos algunas abstracciones con más sentido
      (defn tripulante-cumple-años [tripulante]
        (assoc tripulante :edad (inc (:edad tripulante))))

      ;; (tripulante-cumple-años tripulante-riker)

      (defn tripulante-asignacion-de-rango [tripulante nuevo-rango]
        (assoc tripulante :rango nuevo-rango))

      ;;(tripulante-asignacion-de-rango tripulante-riker "capitan")
    #+END_SRC
*** Ejemplo - Agregar una ó varias entradas a una estructura Map con assoc
    #+BEGIN_SRC clojure
      (def star-trek-generations {:id 589
                                  :titulo "Star Trek: Generations"
                                  :pais "Estados Unidos"
                                  :año 1994})

      ;; agregamos sólo una entrada
      ;; (devuelve una nueva estructura map, la original se mantiene inmutable)
      (assoc star-trek-generations :idioma "Inglés")

      ;; agregamos varias entradas
      ;; (devuelve una nueva estructura map, la original se mantiene inmutable)
      (assoc star-trek-generations
             :idioma "Inglés"
             :genero "Ciencia ficción"
             :duracion-minutos 118)
    #+END_SRC
*** Ejemplo - Modificar una o varias entradas de una estructura Map con assoc
    #+BEGIN_SRC clojure
      (def star-trek-generations {:id 589
                                  :titulo "Star Trek: Generations"
                                  :pais "Estados Unidos"
                                  :año 1994})

      ;; modificamos el valor asociado a una keyword usando de base la estructura original
      ;; (devuelve una nueva estructura map, la original se mantiene inmutable)
      (assoc star-trek-generations :pais "Australia")

      ;; modificar varias entradas de la estructura original
      ;; (devuelve una nueva estructura map, la original se mantiene inmutable)
      (assoc star-trek-generations
             :pais "Australia"
             :año 1995)
    #+END_SRC
* conj - Agregar una ó varias estructuras asociativas map a otra estructura asociativa Map
** Conceptos
   - ~conj~ se comporta similar que ~merge~

   #+BEGIN_QUOTE
   Si usamos ~conj~ con listas ó vectores, podemos agregar elementos en ellos

   Si usamos ~conj~ con estructuras map asociativas, podemos agregar estructuras map dentro de otra estructura map
   #+END_QUOTE
** Ejemplos
*** Ejemplo - Agregar una estructura Map a otra estructura Map
    #+BEGIN_SRC clojure
      (def star-trek-generations {:id 589
                                  :titulo "Star Trek: Generations"
                                  :pais "Estados Unidos"
                                  :año 1994})

      (def star-trek-elenco [{:personaje "Jean Luc Picard" :rango "Capitán"}
                             {:personaje "William Riker" :rango "Comandante"}
                             {:personaje "Data" :rango "Teniente"}])

      (def star-trek-presupuesto {:presupuesto-dolares 35000000
                                  :recaudacion-dolares 128000000})

      ;; agregamos una estructura map
      ;; (devuelve una nueva estructura map, la original se mantiene inmutable)
      (conj star-trek-generations star-trek-presupuesto)

      ;; repetimos lo anterior pero suponiendo que no sabriamos como nombrar la abstracción
      (conj star-trek-generations {:presupuesto-dolares 35000000
                                   :recaudacion-dolares 128000000})

      ;; agregamos otra estructura map
      ;; (devuelve una nueva estructura map, la original se mantiene inmutable)
      (def star-trek-generations-con-elenco
        (conj star-trek-generations {:elenco star-trek-elenco}))
    #+END_SRC
*** Ejemplo - Modificar varias entradas de una estructura Map
    #+BEGIN_SRC clojure
      (def star-trek-generations {:id 589
                                  :titulo "Star Trek: Generations"
                                  :pais "Estados Unidos"
                                  :año 1994})

      ;; cambiamos varias entradas de la estructura original
      ;; (devuelve una nueva estructura map, las originales se mantienen inmutables)
      (conj star-trek-generations {:pais "Australia"
                                   :año 1995})
    #+END_SRC
* merge - Unir/Mergear varias estructuras asociativas map
** Conceptos
   - ~merge~ une/mergea dos ó más estructuras map
** Ejemplos
*** Ejemplo - Mergear tres estructuras map
    #+BEGIN_SRC clojure
      (def star-trek-generations {:id 589
                                  :titulo "Star Trek: Generations"
                                  :pais "Estados Unidos"
                                  :año 1994})

      (def star-trek-elenco [{:personaje "Jean Luc Picard" :rango "Capitán"}
                             {:personaje "William Riker" :rango "Comandante"}
                             {:personaje "Data" :rango "Teniente"}])

      (def star-trek-presupuesto {:presupuesto-dolares 35000000
                                  :recaudacion-dolares 128000000})

      ;; agrupamos/mergeamos varias estructuras map
      ;; (devuelve una nueva estructura map, las originales se mantienen inmutables)
      (merge star-trek-generations
             star-trek-presupuesto
             {:elenco star-trek-elenco})
    #+END_SRC
* dissoc - Remover entradas de una estructura asociativa Map
** Conceptos
   - ~dissoc~ remueve una ó varias entradas de una estructura map, pasandole por parámetro las keywords de las entradas
** Ejemplos
*** Ejemplo Básico
    #+BEGIN_SRC clojure
      (def posicion {:x 100
                     :y 150
                     :z 0})

      ;; removemos la entrada que tiene la keyword :z
      (dissoc posicion :z)

      ;; removemos las entradas que tienen la keyword :x :y
      (dissoc posicion :x :y)
    #+END_SRC
*** Ejemplo
    #+BEGIN_SRC clojure
      (def star-trek-generations {:id 589
                                  :titulo "Star Trek: Generations"
                                  :pais "Estados Unidos"
                                  :presupuesto-dolares 35000000
                                  :recaudacion-dolares 128000000
                                  :año 1994})

      ;; removemos una o varias entradas de la estructura map, indicando las keywords
      (defn pelicula-sin-presupuesto [pelicula]
        (dissoc pelicula :presupuesto-dolares :recaudacion-dolares))

      (pelicula-sin-presupuesto star-trek-generations)
    #+END_SRC
* select-keys - Seleccionar entradas específicas de una estructura asociativa Map
** Conceptos
   - la sintáxis es de la forma ~(select-keys estructura-asociativa-map secuencia-de-keywords)~
   - ~select-keys~ selecciona una ó más entradas de una *estructura asociativa map*
   - ~select-keys~ espera como 2º parámetro una *secuencia de keywords* (Ej. ~[:nombre :pais :edad]~)
** Ejemplo Básico
    #+BEGIN_SRC clojure
      (def usuario-inversor {:usuario "pepe" :clave "pepe123"
                             :nombre "Carlos"
                             :apellido "Ramirez"
                             :edad 19
                             :pais "Polonia"})

      ;; select-keys espera recibir una secuencia de keywords
      ;; y seleccionamos sólo dos entradas de la estructura asociativa map
      (select-keys usuario-inversor [:usuario :clave])

      ;; creamos una abstracción de los datos personales de un usuario
      ;; y seleccionamos sólo cuatro entradas de la estructura asociativa map
      (defn datos-personales [usuario]
        (select-keys usuario [:nombre :apellido :edad :pais]))

      (datos-personales usuario-inversor)
    #+END_SRC
* get-in - Obtener el valor de una entrada de estructuras asociativas Map anidadas
** Conceptos
   - la sintáxis es de la forma ~(get-in estructura-map secuencia-de-keywords)~
   - ~get-in~ accede a una *estructura asociativa Map* con uno ó varios *niveles de anidamiento*
   - ~get-in~ espera como 2º parámetro una *secuencia de keywords* en el orden en el que accede a las estructuras map anidadas

   #+BEGIN_QUOTE
   Si alguna entrada tiene asociada un vector como valor,
   podemos acceder a un elemento del vector agregando la posicion luego de la keyword de la entrada

   Por ejemplo para acceder a la primera materia de un alumno podría ser ~(get-in alumno [:materia 0])~
   #+END_QUOTE
** Ejemplos
*** Ejemplo Básico
    #+BEGIN_SRC clojure
      ;; 1. accedemos a entrada con keyword :posicion
      ;; 2. accedemos a entrada con keyword :x
      (get-in {:posicion {:x 100 :y 500 :z 200}}
              [:posicion :x])

      ;; misma idea que el anterior pero con direccion y código postal
      (get-in {:nombre "Google"
               :direccion {:pais "Estados Unidos"
                           :codigo-postal 1401}}
              [:direccion :codigo-postal])

      ;; 1. accedemos a entrada con keyword :historial
      ;; 2. accedemos al elemento con posicion cero del vector asociado a :historial
      ;; 3. accedemos a entrada con keyword :usuario
      (get-in {:historial [{:timestamp 1000 :usuario "pepe"}
                           {:timestamp 1001 :usuario "pedro"}
                           {:timestamp 1002 :usuario "samu"}]}
              [:historial 0 :usuario])
    #+END_SRC
*** Ejemplo
  #+BEGIN_SRC clojure
    (def pelicula-star-trek {:id 589
                             :titulo "Star Trek: Generations"
                             :pais "Estados Unidos"
                             :año 1994
                             :estado-financiero { :inversion 35000000
                                                 :recaudacion 128000000}})

    (def star-trek-personajes [{:personaje "Jean Luc Picard"
                                :rango "Capitán"
                                :hobbies ["leer" "arqueología"]}
                               {:personaje "William Riker"
                                :rango "Comandante"
                                :hobbies ["seducir"]}
                               {:personaje "Data"
                                :rango "Teniente"
                                :hobbies ["violin" "investigar"]}])

    (defn inversion-inicial [pelicula]
      (get-in pelicula-star-trek [:estado-financiero :inversion]))

    (inversion-inicial pelicula-star-trek)

    ;; accedemos al primer elemento del vector
    (get-in star-trek-personajes [0])

    ;; lo anterior funciona pero sería más práctico utilizar la función (nth nombre-vector posicion),
    ;; porque get-in se utiliza más para estructuras anidadas
    (nth star-trek-personajes 0)

    ;; accedemos al primer elemento y luego a la entrada con la keyword :personaje ó :hobbies
    (get-in star-trek-personajes [0 :personaje])

    (get-in star-trek-personajes [0 :hobbies])

    ;; accedemos al tercer elemento (el primero tiene indice cero)
    ;; luego a la entrada con la keyword :hobbies
    ;; luego accedemos al primer elemento del vector asociado a :hobbies
    (get-in star-trek-personajes [2 :hobbies 1])
  #+END_SRC
* assoc-in - Modificar estructuras asociativas Map anidadas
** Conceptos
   - la sintáxis es de la forma ~(update-in estructura-map secuencia-de-keywords nuevo-valor)~
   - ~assoc-in~ es una combinación entre ~get-in~ y ~assoc~
     1) similar a ~get-in~ porque accede a *estructuras asociativas map anidadas*
     2) similar a ~assoc~ porque modifica el valor de una entrada asociada a una keyword de una estructura map asociativa

   #+BEGIN_QUOTE
   Si la entrada a modificar con ~assoc-in~ en una estructura map asociativa no existe, entonces la crea.
   #+END_QUOTE
** Ejemplo Básico
   #+BEGIN_SRC clojure
     (def mouse {:posicion {:x 100 :y 200}})

     (def empresa {:nombre "Google"
                   :direccion {:pais "Estados Unidos"
                               :codigo-postal 1401}})

     (def browser {:historial [{:timestamp 1000 :usuario "pepe"}
                               {:timestamp 1001 :usuario "pedro"}
                               {:timestamp 1002 :usuario "samu"}]})

     ;; 1. accedemos a entrada con keyword :posicion
     ;; 2. accedemos a entrada con keyword :x
     (get-in mouse [:posicion :x])

     ;; 1. accedemos a entrada con keyword :posicion
     ;; 2. modificamos a 5 el valor de la entrada con keyword :x
     (assoc-in mouse [:posicion :x] 5)

     ;; misma idea que el anterior pero con direccion y código postal
     (assoc-in empresa [:direccion :codigo-postal] 5009)

     ;; 1. accedemos a entrada con keyword :historial
     ;; 2. accedemos al elemento con posicion cero del vector asociado a :historial
     ;; 3. modificamos el valor de la entrada con keyword :usuario a "pedrito"
     (assoc-in browser [:historial 0 :usuario] "pedrito")
   #+END_SRC
* update-in - Modificar estructuras asociativas Map anidadas
** Conceptos
   - la sintáxis es de la forma ~(update-in estructura-map secuencia-de-keywords funcion)~
   - ~update-in~ es similar a ~assoc-in~ pero se diferencia en el 3º parámetro
     1) espera como 1º parámetro una *estructura map asociativa*
     2) espera como 2º parámetro una *secuencia de keywords* para acceder a una o varias *estructuras map anidadas*
        (/podemos interpretarlo como una ruta de acceso por niveles/)
     3) espera como 3º parámetro una función
        - que espere recibir por parámetro el valor asociado a la keyword de la entrada accedida
        - que devuelva el nuevo valor (/que reemplazará el valor actual/)

     #+BEGIN_QUOTE
     La función que pasamos como 3º parámetro a ~update-in~ puede ser
     - una función anónima acortada (Ej. ~#(+ 1 %)~ ó ~#(* 2 %)~) dónde ~%~ representa el valor del parámetro
     - una función nombrada (Ej. ~+ 1~ ó ~* 2~ ó ~inc~ ó incluso una que hayamos definido nosotros)
     #+END_QUOTE
** Ejemplo Básico
   #+BEGIN_SRC clojure
     (def mouse {:posicion {:x 100 :y 200}})

     ;; 1. accedemos a entrada con keyword :posicion
     ;; 2. accedemos a entrada con keyword :x
     (get-in mouse [:posicion :x])

     ;; 1. accedemos a entrada con keyword :posicion
     ;; 2. incrementamos en 1 el valor de la entrada con keyword :x
     (update-in mouse [:posicion :x] inc)

     ;; misma idea que usar la función (inc)
     (update-in mouse [:posicion :x] + 1)

     ;; misma idea que usar la función (inc)
     ;; pero usamos la función anónima abreviada #()
     (update-in mouse [:posicion :x] #(+ 1 %))

     (defn incrementar-en-1 [x] (+ 1 x))

     ;; misma idea que usar la función (inc)
     ;; pero usamos una función nombrada propia
     (update-in mouse [:posicion :x] incrementar-en-1)

     ;; 1. accedemos a entrada con keyword :posicion
     ;; 2. modificamos el valor de la entrada con keyword :x
     ;; y le agregamos el doble del valor que tenga asociado
     (update-in mouse [:posicion :x] #(* 2 %))

     ;; misma idea que usar la función anónima #(* 2 %)
     (update-in mouse [:posicion :x] * 2)
   #+END_SRC
* Update Vs Assoc - Modificar entradas entradas de una estructura asociativa Map
** Conceptos
   - ~update~ es similar a ~assoc~ porque modifican una *entrada de una estructura map*
   - ~update~ se diferencia de ~assoc~ porque pasamos por parámetro *una función* en vez del *valor específico*
** Ejemplos Básicos
*** Ejemplo
    #+BEGIN_SRC clojure
      (def persona {:nombre "Gerardo" :edad 35})

      ;; le cambiamos la edad con assoc
      (assoc persona :edad 11)

      ;; hacemos lo mismo con update,
      ;; aunque no tiene mucho sentido porque assoc lo hacemos más fácil y entendible
      (update persona :edad (fn [_] 11))
    #+END_SRC
*** Ejemplo - Usando la función update
    #+BEGIN_SRC clojure
      (def persona {:nombre "Gerardo" :edad 35 :hobbies ["correr" "cocinar"]})

      ;; a update le pasamos por parámetro una función para modificar una entrada de una estructura map
      ;; cada modificación devuelve una estructura map nueva..

      ;; a. incrementamos en 1 la edad
      (update persona :edad inc)
      ;; b. seguido del nombre le agregamos otra cadena
      (update persona :nombre #(str % " Fisher"))
      ;; c. agregamos un hobbie a los hobbies representados por un vector
      (update persona :hobbies #(conj % "leer"))
    #+END_SRC
*** Ejemplo - Usando la función assoc
    #+BEGIN_SRC clojure
      (def persona {:nombre "Gerardo" :edad 35 :hobbies ["correr" "cocinar"]})

      ;; cada modificación devuelve una estructura map nueva..

      ;; a) le cambiamos la edad
      (assoc persona :edad 38)

      ;; b) le agregamos una entrada nueva (si existiera, la modificaría)
      (assoc persona :apellido "Samuel")

      ;; c) le sacamos los hobbies
      (assoc persona :hobbies [])
    #+END_SRC
* Update - Modificar una entrada de una estructura asociativa Map
** Conceptos
   - la sintáxis es de la forma ~(update estructura-map keyword-elegida funcion)~
   - ~update~ es similar a ~update-in~ pero se diferencia en que
     1) modifica una *entrada de una estructura map* pasando sólo su *keyword*
     2) no necesita de una *secuencia de keywords* porque NO accede a una entrada de *estructuras asociativas map anidadas*
** Ejemplos
*** Ejemplo Básico
    #+BEGIN_SRC clojure
      (def libro-los-amuletos {:autores [{:nombre "Carlos Pedrito" :edad 50}
                                         {:nombre "Johan Samuel" :edad 65}]
                               :titulo "El señor de los amuletos"})

      (update libro-los-amuletos :autores conj {:nombre "Gerdado Fisher" :edad 35})

      (def persona {:nombre "Gerardo" :edad 35})
      (update persona :edad inc)
      (update persona :nombre #(str % " Fisher"))

      (def cantidad-visitas-semanales [0 0 0 0 0 0 0])

      ;; 0 representa la posición del primer elemento del vector
      (update cantidad-visitas-semanales 0 inc)

      ;; 1 representa la posición del segundo elemento del vector
      (update cantidad-visitas-semanales 1 inc)

      ;; usamos la macro # para definir una función anónima
      ;; para incrementar en 1 el valor del segundo elemento del vector
      (update cantidad-visitas-semanales 1 #(+ % 1))

      ;; en el ejemplo anterior definimos una función anónima
      ;; para incrementar en 1 el valor del segundo elemento del vector
    #+END_SRC
*** Ejemplo 1 - Encontrar un elemento por id en un vector de estructuras map asociativas y actualizarlo
    #+BEGIN_SRC clojure
      (def correo-juan {:mensajes [{:id 100 :leido? false}
                                   {:id 101 :leido? false}
                                   {:id 102 :leido? false}
                                   {:id 103 :leido? false}
                                   {:id 105 :leido? false}]})

      ;; - update, actualiza el estado de un objeto pasandole una función que lo modifica y devuelve un nuevo objeto
      ;; - al map le pasamos una función anónima con la macro #() que transforma los elementos,
      ;; si cumplen el predicado del IF entonces los transforma con la función assoc modificando la keyword :leido?
      ;; si NO cumplen el predicado del IF entonces devuelve % es decir el mismo elemento sin transformar, dónde el % es propio de la macro #()
      (defn marcar-mensaje-como-leido [id]
        (fn [correo]
          (update correo :mensajes
                  (fn [mensajes]
                    (map #(if (= id (:id %)) (assoc % :leido? true) %) mensajes)))))

      ;; marcar-mensaje-como-leido espera un parámetro (le pasamos 102)
      ;; y devuelve una función que espera un parámetro (le pasamos correo-juan)
      ((marcar-mensaje-como-leido 102) correo-juan)
    #+END_SRC
