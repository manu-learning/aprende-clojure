#+TITLE: Patrones de Integración Empresarial (EIP)
* Conceptos Básicos
** Conceptos relacionados
    #+BEGIN_QUOTE
    Un *Sistema Distribuido* requiere de un *Middleware* que actúe como puente para la comunicación entre los componentes/servicios de dicho Sistema,
    los *Sistemas/Agentes de Mensajería* son un tipo *Middleware* pero *Orientado a Mensajes* (MOM) para la *comunicación distribuida*,
    un *Middleware Orientado a Mensajes* (MOM) puede implementar el modelo *Publish/Subscribe*

    El modelo *Publish/Subscribe* es una extensión del *Patrón de Diseño Observer*,
    que implementa un *canal Publish/Subscribe* (canal virtual) en el cual
    1) el *Editor* publica un Mensaje ó un Evento
    2) cuando el Mensaje/Evento ingresa al Canal éste se *propaga* a todos los *Suscriptores* (concepto de broadcast)
    3) es el (MOM) *Middleware Orientado a Mensajes* quien transmite/entrega una copia del Mensaje ó propaga el Evento
    4) los *Suscriptores* reciben automáticamente el Evento (deciden como manejarlo) ó la copia del Mensaje

    El modelo *Publish/Subscribe basado en tópicos* es una extensión del modelo *Pub/Sub*,
    agregando a la implementación que los participantes puedan
    1) publicar eventos
    2) subscribirse a múltiples identificados mediante *palabras clave* (keywords)

    El Sistema/Agente de Mensajería (MOM) tiene la responsabilidad de transmitir los *eventos ó mensajes publicados* que ingresan en un *Canal Publish/Subscribe*,
    pero sólo a los Suscriptores que previamente se suscribieron/registraron a ese Canal (que interpretarlo como un grupo de comunicación)
    #+END_QUOTE
** Integración Empresarial
*** Patrones de Integración Empresarial (EIP)
    - Formas estandarizadas para integrar aplicaciones
    - Derivan a causa de la aparición del incremento de Sistemas Distribuidos más complejos
    - NO dependen de una tecnología determinada
*** Servicios de Mensajería
    - Manera en que se comunican distintas aplicaciones distribuidas
    - Envían/Reciben mensajes en diferentes lenguajes, siempre que cada extremo de la comunicación entienda
      1) el formato del mensaje
      2) el protocolo de mensajería
*** Tipos de Integración
    - Integración de aplicaciones
    - Integración de datos
    - Integración de procesos
    - Integración de dispositivos
** Sistemas Distribuidos
   - requieren de un *Middleware* que actúe como puente para la comunicación entre sus componentes/servicios
   - los componentes del sistema trabajan
     1) *distribuidos físicamente* en
        - distintas *plataformas* (donde construimos la aplicación con un lenguaje de programación determinado, Java, .NET, ...)
        - distintos *entornos* (manejamos la infraestructura, elegimos el SO, la plataforma, etc, es más complejo)
     2) conectados en red
     3) comunicados y coordinanos sólo mediante el *paso de mensajes*
     4) de forma independiente (/lo hace tolerante a fallos, si alguno falla no afecta al resto de los componentes/)
     5) concurrentemente (/usando estrategias que mantengan la integridad de la información/)
** Broadcast (Conexión multipunto)
*** Conceptos
    - un *Broadcast* es una *conexión multipunto*
    - la transmisión de datos es *One to Many* porque envía un *paquete de datos* desde un punto a todos los *nodos de una red*

    #+BEGIN_QUOTE
    Ejemplos de un broadcast
    1) La televisión por cable, el proveedor envía la tranmisión a TODOS los usuarios televidentes (red de usuarios que pagan)
    2) Un newsletter ó Boletín digital, notifica a TODOS los suscriptores (red de suscriptores que se registraron)
    #+END_QUOTE
*** Actores
**** Emisor
     - envía el paquete de datos al *Broadcast* (éste entrega/distribuye el mensaje)
     - no necesita conocer quienes reciben el mensaje
     - no necesita hacer múltiples envíos a cada Receptor, sólo hace un envío, es responsabilidad del *Broadcast* distribuirlo
**** Receptores
     - reciben un paquete de datos distribuido/entregado por *Broadcast*
*** Diagramas
**** Diagrama 1 - Formas de transmisión de datos entre redes
     [[file:./../assets/images/formas-de-transmision-de-datos-en-redes.jpg]]
*** Referencias
    1. https://devopedia.org/local-area-network
    2. https://www.ionos.es/digitalguide/servidores/know-how/broadcast/
** Canales (Channel)
   - Un *canal* es sólo una *dirección lógica* por eso también se los llama *Canal Virtual*
   - Actúan como un tunel (pipe) virtual que conecta al Emisor y Receptor
   - Son utilizados por un (MOM) Middleware Orientado a Mensaje para transmitir datos
   - Existen como un recurso dentro del (MOM)
   - Cuando una aplicación envía ó recupera datos de un (MOM) lo hace de un *Canal de Mensajes* específico
** Agentes de Mensajería - Middleware Orientado a Mensajes (MOM)
   - son un *tipo de middleware* un *Middleware Orientado a la Mensajería* (MOM)
   - soportan el envío/recepción de *paquetes de datos* de forma sincrónica/asincrónica
   - las aplicaciones se conectan a ellos para facilitar de forma asíncrona la creación, envío, recepción y lectura de mensajes
   - encargados de transmitir los *eventos* a través de un *canal de eventos* (es el puente que conecta al Emisor y al Receptor)

   #+BEGIN_QUOTE
   Sirven no solo para mediar entre *componentes de un sistema* si no también entre *distintas aplicaciones*
   1) la conectividad (suelen soportan varios protocolos de conectividad como HTTP/S, SSL, TCP/IP, ...)
   2) la mensajería
   #+END_QUOTE
** Proceso de transmisión de un mensaje en un (MOM)
*** Conceptos
   #+BEGIN_QUOTE
   En un MOM, un mensaje se transmite en cinco pasos:
   1) *Crear:* El Emisor CREA un mensaje y coloca los datos que desea transmitir
   2) *Enviar:*. El Emisor AGREGA el mensaje en el canal
   3) *Entregar:*. El (MOM) Agente/Sistema de mensajería TRANSFIERE el mensaje al Receptor
   4) *Recibir:*. El Receptor LEE/RETIRA el mensaje desde el canal
   5) *Procesar:* El Receptor EXTRAE los datos del mensaje
   #+END_QUOTE
*** Operaciones asincrónicas - Enviar y Olvidar (send and forget)
    #+BEGIN_QUOTE
    En el paso 2 (Enviar), la aplicación emisora envía el mensaje a un canal.
    1) Una vez que el envío es completado, la aplicación puede realizar otras tareas mientras que el MOM transmite el mensaje en paralelo
    2) La aplicación confiará en que el receptor recibirá el mensaje y puede no esperar hasta que esto ocurra (operación asincrónica)
    #+END_QUOTE
*** Almacenamiento Temporal (Store-and-forward)
    #+BEGIN_QUOTE
    En el paso 2 (Enviar), cuando la aplicación emisora ENVIA el mensaje a un canal,
    el (MOM) Sistema de Mensajería lo PERSISTE "temporalmente" en la computadora del *Emisor* (en memoria o disco)

    En el paso 3 (Entregar), el (MOM) Sistema de Mensajería ENTREGA el mensaje direccionándolo
    hasta la computadora del *Receptor* donde se PERSISTE allí una vez más (ó reacciona y realiza alguna acción)
    #+END_QUOTE
   #+END_QUOTE
** Diagramas
*** Diagrama 1 - Modelo Cola de Mensajes ó (PTP) Punto a Punto
    #+ATTR_HTML: :width 400px
    [[file:./../assets/images/ptp.jpg]]
*** Diagrama 2 - Modelo Publicación/Suscripción extensión del Patrón de Diseño Observer
    #+ATTR_HTML: :width 500px
    [[file:./../assets/images/modelo-ps.png]]
*** Diagrama 3 - Modelo Publicación/Suscripción basado en tópicos extensión del Modelo Publish/Subscribe
    #+ATTR_HTML: :width 400px
    [[file:./../assets/images/pubsub.jpg]]
*** Diagrama 4 - Modelo (LBS) Servicio basado en localización
    [[file:./../assets/images/lbs-con-middleware.png]]
*** Diagrama 5 - Pasos de transmisión de un mensaje en un (MOM) Middleware Orientado a Mensajes
    [[file:./../assets/images/pasos-de-un-mom.png]]
*** Diagrama 6 - Modelo Publicación/Suscripción enviando eventos
    [[file:./../assets/images/pubsub-eventos.png]]
** Referencias
*** Referencias de Universidades
    1. [[http://www.jtech.ua.es/j2ee/publico/mens-2010-11/sesion01-apuntes.html][Introducción a JMS (Universidad de Alicante)]]
    2. [[https://riunet.upv.es/bitstream/handle/10251/6408/Comunicaciones%20en%20los%20sistemas%20distribuidos.pdf][Sistemas de comunicaciones más utilizados en Control Distribuido (Universidad Politécnica de Valencia, Ing. Miguel Merlino)]]
    3. [[https://www.colibri.udelar.edu.uy/jspui/bitstream/20.500.12008/21724/1/tm-merlino-miguel.pdf][Extensión especial de Middleware orientada a mensajeria (Universidad de la República Uruguay)]]
    4. [[http://cs.uns.edu.ar/~sd/data/apuntes/SD-2019-mod%2003.pdf][Comunicación en Sistemas Distribuidos (Universidad Nacional del Sur, Argentina)]]
    5. [[https://www.cartagena99.com/recursos/alumnos/apuntes/AED_fifo_lifo.pdf][Pilas LIFO y Colas LIFO (Universidad Politécnica de Madrid)]]
*** Referencias Destacadas
    1. [[https://www.redhat.com/es/topics/integration][Concepto de integración empresarial (redhat.com)]]
    2. [[https://www.sap.com/latinamerica/insights/enterprise-integration.html][Integración Empresarial (sap.com)]]
    3. [[https://www.atlassian.com/es/microservices/microservices-architecture/distributed-architecture][Arquitectura de microservicios (atlassian.com)]]
    4. [[https://aws.amazon.com/es/what-is/middleware/][¿Qué es un middleware? (aws.amazon.com)]]
*** Otras Referencias
    1. [[https://sg.com.mx/revista/58/desarrollo-de-sistemas-distribuidos][Desarrollo de Sistemas Distribuidos (sg.com.mx)]]
    2. [[https://tekla.io/blog/middleware-que-es/][Middleware, qué es y para qué sirve? (tekla.io)]]
    3. [[https://www.programaenlinea.net/que-plataforma-tecnologica-es-mejor-java-vs-net/][Que plataforma es mejor java o net (programaenlinea.net)]]
    4. [[https://www.cybermedian.com/es/enterprise-integration-patterns-eip-tutorial/][Enterprise INtegrration patterns tutorial (cybermedian.com)]]
    5. [[https://medium.com/@maniakhitoccori/los-10-patrones-comunes-de-arquitectura-de-software-d8b9047edf0b][Los 10 patrones comunes de arquitectura de software (medium.com/@maniakhitoccori)]]
*** Issues
    1. [[https://stackoverflow.com/questions/6574291/ems-esb-and-mom-jms][EMS, ESB, MOM and JMS (stackoverflow.com)]]
* Cola de Mensajes Vs Publicación/Suscripción
** Tabla Comparativa
    #+NAME: cola-de-mensajes
    | Patrón de Mensajería               | Cola de Mensajes ó (PTP, punto a punto)                                                       |
    |------------------------------------+-----------------------------------------------------------------------------------------------|
    | Comunicación                       | One to one (1 mensaje -> 1 consumidor)                                                        |
    |------------------------------------+-----------------------------------------------------------------------------------------------|
    | Objeto de interés                  | mensaje (se consume una única vez, es eliminado luego de ser retirado de la Cola de mensajes) |
    |------------------------------------+-----------------------------------------------------------------------------------------------|
    | Destino del objeto de interés      | Cola de Mensajes (persiste mensajes)                                                          |
    |------------------------------------+-----------------------------------------------------------------------------------------------|
    | Emisor                             | Productor (crea/envía mensajes a una Cola específica)                                         |
    |------------------------------------+-----------------------------------------------------------------------------------------------|
    | Receptor                           | Consumidor (retira mensajes de 1 o varias Colas de mensajes)                                  |
    |------------------------------------+-----------------------------------------------------------------------------------------------|
    | Interés del Emisor con el Receptor | SI, si lo configuramos como *request/reply* para que confirme la recepción del mensaje        |

    #+NAME: publicacion-suscripcion
    | Patrón de Mensajería               | Publicación/Suscripción                                                                                     |
    |------------------------------------+-------------------------------------------------------------------------------------------------------------|
    | Comunicación                       | Many to Many ó One to Many ( 1 evento/mensaje -> muchos suscriptores )                                      |
    |------------------------------------+-------------------------------------------------------------------------------------------------------------|
    | Objeto de interés                  | mensaje ó evento                                                                                            |
    |------------------------------------+-------------------------------------------------------------------------------------------------------------|
    | Destino del objeto de interés      | Canal Publish-Suscribe (un Middleware propaga el evento ó entrega una copia del mensaje a los Suscriptores) |
    |------------------------------------+-------------------------------------------------------------------------------------------------------------|
    | Emisor                             | Editor (crea/publica eventos ó mensajes en un Canal Virtual contenido por un Middleware)                    |
    |------------------------------------+-------------------------------------------------------------------------------------------------------------|
    | Receptor                           | Suscriptor (se suscribe/registra a un canal y reciben automáticamente los eventos ó mensajes)               |
    |------------------------------------+-------------------------------------------------------------------------------------------------------------|
    | Interés del Emisor con el Receptor | NO, la comunicación es anónima (no se entera si el Receptor recibe ó no el evento ó mensaje)                |
** Referencias
*** Referencias Destacadas
    1. [[https://www.baeldung.com/pub-sub-vs-message-queues][Pub-Sub Vs Message Queues (baeldung.com)]]
    2. [[https://docs.oracle.com/cd/E19225-01/820-5822/byauk/index.html][Point to Point or Publish and Subscribe (docs.oracle.com)]]
    3. [[https://www.enterpriseintegrationpatterns.com/patterns/conversation/][Conversation Patterns (enterpriseintegrationpatterns.com)]]
*** Otras Referencias
    1. [[https://iberasync.es/publicacion-subscripcion-vs-cola-de-mensajes/][Publicación/Suscripción Vs Cola de Mensajes (iberasync.es)]]
* Cola de Mensajes (Message Queue) ó Modelo Punto a Punto (PTP, P2P) ó Productor/Consumidor
** Comunicación punto a punto (PTP, P2P)
   - el modelo (PTP) tiene una comunicación *One to One* porque un mensaje lo recibe sólo un Consumidor
   - el *flujo de los datos* tiene sólo un sentido ~(Productor) -> Cola de Mensajes -> (Consumidor ó Consumidores)~
     (/el Productor podría conocer al Consumidor, pero NO al revés/)
** Escenarios Particulares
*** Muchos Consumidores utilizando la misma Cola de Mensajes
     #+BEGIN_QUOTE
     Si tenemos un escenario dónde varios *Consumidores* esperan y compiten por recuperar/leer un mensaje de la misma Cola de Mensajes,
     entonces sólo un Consumidor recibirá el mensaje (/porque una vez que se retira el mensaje, se elimina de la cola de mensajes/)
     porque este modelo de comunicación está pensada de *punto a punto* (PTP, P2P)
     #+END_QUOTE
*** Decidir si cambiar al modelo pub/sub
     #+BEGIN_QUOTE
     Si tenemos un escenario dónde varios *Productores* y *Consumidores* utilizan la misma *Cola de Mensajes*,
     pero queremos que varios *Consumidores* reciban el mismo mensaje

     entonces debemos cambiar al modelo *Publicación/Suscripción* (Publish/Subscribe),
     porque varios consumidores reciben una *copia del mensaje*
     #+END_QUOTE
** Comunicación Indirecta (Operaciones Asincrónicas)
  - entre los componentes del sistema (/ó bien entre aplicaciones distribuidas en distintos entornos/)
    1) reduce el *acoplamiento* entre el Productor/Consumidor
    2) aparece un recurso/componente intermediario entre el Productor/Consumidor que es la *Cola de Mensajes*
** Mensajes
*** Conceptos
    - cada mensaje se puede retirar/consumir una única vez
    - luego de retirado de la Cola de Mensajes, se elimina y deja de estar disponible
*** Criterio de Entrega
    - por default la lógica de entrega es FIFO, el primero que ingresa a la Cola de Mensajes será el primero en salir (ser entregado)
    - los mensajes podrían tener *prioridad* modificando el orden de entrega FIFO
*** Persistentes y No Persistentes
    - los *NO persistentes* tienen un *tiempo de expiración*
    - los *persistentes* quedan en la *cola de espera*

    #+BEGIN_QUOTE
    Un *mensaje no persistente* podría ser un problema si ocurre algún problema durante la recepción del mensaje
    (Ej. falla la conexión, falla el consumidor, ...)
    #+END_QUOTE
** Actores
*** Productor (Producer)
  - agrega mensajes en la *Cola de mensajes*
  - si la Comunicación es 1 a 1, entonces conoce al *Consumidor* y agrega mensajes en esa *Cola de mensajes*
  - puede conocer al Consumidor, quien recibe y recupera los mensajes (/pero no ocurre el caso inverso/)
*** Consumidor (Consumer)
  - recupera el mensaje de la *Cola de mensajes*
  - difiere del *Modelo Publicación/Subscripción*
    - en este modelo (PTP) el propio Consumidor debe retirar el mensaje de la *Cola de Mensajes*
    - en el modelo Pub/Sub el Suscriptor recibe automáticamente el mensaje que es entregado por un (MOM) Middleware Orientado a Mensajes
** Tranmisión de datos Asíncrona
  - las operaciones de envío/recepción de mensajes es asincrónica
    (/Ej. el productor y consumidor pueden ejecutar en distintos instantes de tiempo e igual se concretaría la comunicación/)
  - los mensajes son consumidos (retirados de la cola de mensajes) sólo cuando las aplicaciones estén disponibles
    (/Ej. útil cuando hay problemas de conectividad, los datos quedan en la cola de mensajes, y no se pierde información/)
** Cualidades de diseño
*** Fiabilidad (Reliable)
    - si NO es un mensaje con tiempo de expiración entonces
      1) NO ocurre pérdida de información por falla de conectividad
      2) los mensajes persisten en la *Cola de mensajes* hasta ser retirados
*** Bajo Acoplamiento
    - un *componente emisor* envía un *mensaje* a un *destino* y el *componente receptor* lo retira de dicho *destino*
      1) el componete emisor, es el productor del mensaje
      2) el destino, es la cola de mensajes (/este componente permite el bajo acoplamiento, la no dependencia/)
      3) el componente receptor, es el consumidor del mensaje
** Referencias
*** Referencias Destacadas
    1. [[https://www.enterpriseintegrationpatterns.com/PointToPointChannel.html][Point to point Channel (enterpriseintegrationpatterns.com)]]
    2. [[https://www.oreilly.com/library/view/java-message-service/9780596802264/ch04.html][Point to point Messaging (oreilly.com)]]
    3. [[https://docs.aws.amazon.com/es_es/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html][SQS, Colas de tipo FIFO (docs.aws.amazon.com)]]
    4. [[https://aws.amazon.com/es/message-queue/][Cola de mensajes (aws.amazon.com)]]
    5. [[https://www.ibm.com/topics/message-queues][Message queues (ibm.com)]]
* Modelo Publicación/Suscripción (Publish/Subscribe)
** Conceptos
   - un *grupo de Consumidores* previamente *suscriptos/registrados al mismo Canal* reciben el mismo *mensaje/evento publicado*
   - los *mensajes/eventos publicados* en un *Canal* NO son encolados, esto lo diferencia del modelo (PTP) Cola de Mensajes
** Implementa/Extiende el Patrón de Diseño Observer
*** Implementa del Patrón Observer
    - al *Sujeto Observable* que notifica a todos los *Suscriptores* cuando
      1) hay un *cambio de estado*
      2) una *ocurrencia de un evento*
*** Extiende el Patrón Observer
   - agrega la notificación a los *suscriptores* se realiza a través de un *Canal publish/subscribe*
** Comunicación
   - tiene una relación *One to Many* porque la *publicación de un mensaje/evento* puede ser recibido por varios *Suscriptores*
   - ningún componente (Editor/Suscriptor) conoce al otro por tanto es una comunicación anónima
** Actores
*** Editor (Producer/Publisher)
    - *CREA y PUBLICA* Mensajes ó Eventos a uno ó varios *Canales Publish/Subscribe*
    - expone la operación de *Suscripción*
      (/necesaria para que los consumidores se suscriban al Canal de interés y luego reciban los eventos ó mensajes publicados/)
    - NO necesita conocer de los Suscriptores
      1) quienes son
      2) que hacen con los datos que reciban
*** Suscriptor (Consumer/Subscriber)
    - un *Consumidor* puede *suscribirse/registrarse* (operación) a uno ó varios *Canales*
    - un *Consumidor* se convierte en *Suscriptor* luego de suscribirse a un *Canal*
    - los *Suscriptores* reciben los *eventos/mensajes publicados* de los *Canales* a los que registró/suscribió
** Canal Publish/Subscribe
   - permite clasificar los *eventos/mensajes publicados* en *categorías*
     (Ej. para componentes interesados en recibir errores de la aplicación)
   - el destino de los *eventos publicados* por los *editores* (producer/publisher)
   - el recurso que permite el *bajo acoplamiento* entre los componentes Emisor y Receptor

   #+BEGIN_QUOTE
   Si interpretamos al Canal sólo como un tunel (pipe) con entradas/salidas
   1) recibe como entrada el *Mensaje ó Evento publicado*
   2) tiene múltiples salidas, una salida por cada Suscriptor
   3) la salida es una *COPIA del mensaje* ó la *propagación del evento* (/a cada Suscriptor/)
   #+END_QUOTE
** Referencias
*** Referencias Destacadas
    1. [[https://www.enterpriseintegrationpatterns.com/PublishSubscribeChannel.html][Publish-Subscribe Channel (enterpriseintegrationpatterns.com)]]
    2. [[https://www.enterpriseintegrationpatterns.com/EventMessage.html][Event Message (enterpriseintegrationpatterns.com)]]
    3. [[https://cloud.google.com/pubsub/docs/overview?hl=es-419][Que es Pub/Sub (cloud.google.com)]]
    4. [[https://cloud.google.com/pubsub/architecture][Descripción de la Arquitectura de Pub/Sub (cloud.google.com)]]
    5. [[https://aws.amazon.com/es/pub-sub-messaging/][Pub/Sub Messaging (aws.amazon.com)]]
    6. [[https://learn.microsoft.com/en-us/azure/architecture/patterns/publisher-subscriber][Publisher-Subscriber pattern (learn.microsoft.com)]]
*** Otras Referencias
    1. [[https://www.scaler.com/topics/design-patterns/observer-design-pattern/][Observer Design Pattern (scaler.com)]]
    2. [[https://www.pubnub.com/learn/glossary/what-is-publish-subscribe/][What is Publish-Subscribe (pubnub.com)]]
    3. [[https://www.enjoyalgorithms.com/blog/publisher-subscriber-pattern][Publisher-Subscriber an Architectural Design Pattern (enjoyalgorithms.com)]]
    4. [[https://www.toptal.com/ruby-on-rails/the-publish-subscribe-pattern-on-rails][The publish-subscribe pattern on Rails (toptal.com, Ahmed AbdelHalim)]]
    5. [[https://ably.com/blog/pub-sub-pattern-examples][Pub/Sub examples (ably.com, Martin Fietkiewicz)]]
* TODO Modelo Publicación/Suscripción basado en Tópicos
** Extiende el Canal Pub/Sub
   - agrega el subscribirse a múltiples Canales identificados mediante *palabras clave* (keywords)
** Tópico/Tema/Categoría/Grupo de Comunicación
   - Los tópicos se pueden ver como *grupos de comunicación*, por lo tanto
     1) la subscripción a un tópico ~X~ se puede interpretar como ingresar a un grupo ~X~ al que estamos interesados
     2) la publicación de un evento en ~X~ deriva en la propagación del evento entre todos los miembros del grupo ~X~
** Jerarquía de Tópicos
   - organizados según relaciones de contenido de los eventos
   - SUBSCRIBIRSE a un nodo en la jerarquía, implíca SUSCRIBIRSE a todos los SUBTÓPICOS de ese nodo
** Referencias
*** Referencias de Universidades
    1. [[http://shenh.people.clemson.edu/publishedPaper/bookChapter/2009/sub-pub-Shen.pdf][Pub/Sub System as topic-based (Universidad Clemson, Dr. Haiying Shen)]]
*** Otras Referencias
    1. [[https://dev.to/jucian0/pub-sub-pattern-a-brief-explanation-21ed][Pub-Sub pattern a brief explanation (dev.to, Jucian0)]]
