* Intro
  #+BEGIN_QUOTE
  Algunas de las funciones más utilizo en ClojureScript (/por el momento/)
  #+END_QUOTE
* Arrow Macro
** Conceptos
   - Es una macro y se representa con el símbolo ~->~
   - Recibe como parámetro algo de la forma ~[x [f1 & funciones-siguientes]]~

   #+BEGIN_QUOTE
   Encadena el resultado de pasarle x a f1, el resultado se lo pasa a f2, y asi..
   (el resultado se pasa como 2º parámetro a cada función que le siga)

   Por ejemplo
   1. el 1º param x de (->) lo agrega como 2º param en f1 (2º param de ->)
   2. el resultado de f1 (2º param de ->) lo agrega como 2º param de f2
   3. se repite con cada función que siga..
   #+END_QUOTE
** Ejemplos
   #+BEGIN_SRC clojure
     ;; update, actualiza un valor de una estructura map
     ;; assoc, agrega a una estructura map elementos de la forma :clave valor
     ;; :keyword, la propia keyword actúa como una función getter y devuelve el valor asociado
     (defn transform [person]
       (update (assoc person :hair-color :gray) :age inc))

     (transform {:name "Carlitos" :age 39})

     (defn transform* [person]
       (-> person
           (assoc :hair-color :gray)
           (update :age inc)))


     (transform* {:name "Carlitos" :age 39})
   #+END_SRC
** Referencias
   1. [[https://clojuredocs.org/clojure.core/-%3E][-> clojure.core (clojuredocs.org)]]
   2. [[https://clojure.org/guides/threading_macros][Threading Macros Guide (clojure.org)]]
* Atomos (Atom)
** Conceptos
   - la función ~atom~ crea y devuelve un tipo de dato *Atom* al que se lo puede bindear/vincular a una variable
   - el tipo de dato devuelto ~atom~ es *mutable*, por tanto aplican las mismas operaciones que con los *tipos primitivos*
   - la función ~defer~ recupera el valor de un átomo
   - ~@~ es la forma corta de ~defer~
     (similar a cuando usamos la macro ~#~ para acortar una *función anónima*)

   #+BEGIN_QUOTE
   El objetivo de ~atom~ es persistir datos en una *estructura inmutable* como lo es ~map~

   El *estado* de un átomo se lo suele representar con un estructura ~map~
   #+END_QUOTE
** Modificar un átomo con Swap!
   - ~swap!~ cambia el estado de *forma atómica* de un ~atom~
     (/aunque debemos pasarle la función que aplicará el cambio de estado/)
   - ~swap!~ es *thread-safe* por tanto asegura que aplicará cambios evitando una *condición de carrera*
   - los parámetros que recibe son
     1) el 1º parámetro es el átomo
     2) el 2º parámetro es la función que aplicará sobre el valor del átomo

   #+BEGIN_QUOTE
   Internamente la función ~swap!~ opera de la siguiente manera
   1. lee el valor actual que se referencia
   2. aplica la función en el valor
   3. intenta ejecutar la función ~compare-to-set~ (función de más bajo nivel)
   #+END_QUOTE
** Modificar un átomo con Reset!
   - ~reset!~ cambia el valor inicial de un átomo (ó bien de un nombre que referencia a un tipo de dato ~atom~)

   #+BEGIN_QUOTE
   Usarlo podría ser una MALA PRÁCTICA,
   porque no tiene la característica de *thread-safe* por tanto podría existir *condición de carrera*
   #+END_QUOTE
** Ejemplos
*** Ejemplos Básicos
**** Ejemplo 1 - Crear un átomo con atom y Recuperar su valor con @
     #+BEGIN_SRC clojure
       (def mi-atomo (atom 40))

       ;; defer
       ;; - recuperar el valor del átomo ó desreferenciar el átomo
       (deref mi-atomo)

       ;; el @ es la forma corta de defer
       @mi-atomo
     #+END_SRC
**** Ejemplo 2 - Modificar el valor de un átomo con swap!
     #+BEGIN_SRC clojure
       (def mi-atomo (atom 40))

       ;; le pasamos la función (inc) que incrementa en 1
       ;; en éste caso cada vez que evaluamos la expresión, el valor del átomo incrementará en 1 (41,42,..)
       (swap! mi-atomo inc)

       ;; le pasamos la función + y el valor que le sumará al valor del átomo
       ;; en éste caso cada vez que evaluamos la expresión, el valor del átomo incrementará en 2
       (swap! mi-atomo + 2)

       (swap! mi-atomo - 2)

       ;; otra forma sería pasarle una funcion anónima
       (swap! mi-atomo (fn [x] (+ x 2)))
     #+END_SRC
**** Ejemplo 3 - Establecer un nuevo valor inicial al átomo con reset!
     #+BEGIN_SRC clojure
       (def mi-atomo (atom 40))

       ;; reset!
       ;; - cambiar el valor actual del átomo por uno nuevo
       (reset! mi-atomo 0)
     #+END_SRC
*** Ejemplos
**** Ejemplo 1 - Crear un átomo con una estructura map
     #+BEGIN_SRC clojure
       ;; bindeamos/vinculamos a la variable auto un átomo que contiene una estructura map
       (def auto
         (atom {:modelo "Audi"
                :velocidad 10
                :precio 500}))

       ;; desreferenciamos el átomo vinculado/bindeado a la variable auto
       ;; y devolverá la estructura map
       @auto

       ;; con assoc devolvemos una nueva estructura map con la velocidad cambiada
       ;; (si evaluamos @auto el valor seguirá siendo 10)
       (assoc @auto :velocidad 25)

       ;; con swap cambiamos de forma atómica el estado del átomo,
       ;; acá le pasamos una función que cambia el valor de la keyword velocidad a 50
       (swap! auto
              assoc :velocidad 50)

       ;; cambiamos los valores iniciales  del átomo
       ;; (OJO, se considera una mala práctica, porque no tiene la característica de thread-safe por tanto podría existir condición de carrera)
       (reset! auto
              {:modelo "" :velocidad 0 :precio 0})

       ;; para recordar la función assoc
       ;; - devuelve una nueva estructura map
       ;; - asocia a una estructura map un elemento del tipo :clave valor
       ;; - modifica un elemento :clave valor del map, si éste está incluído

       ;; agregamos a un map vacío {} la keyword :velocidad con el valor 10
       (assoc {} :velocidad 10)

       ;; modificamos la keyword velocidad de 10 a 0
       (assoc {:velocidad 10} :velocidad 0)
     #+END_SRC
** Referencias
*** Referencias Oficiales
    1. [[https://clojure.org/reference/atoms][Reference, Atoms (clojure.org)]]
    2. [[https://clojuredocs.org/clojure.core/atom][atom, clojure.core (clojuredocs.org)]]
    3. [[https://clojuredocs.org/clojure.core/swap!][swap! clojure.core (clojuredocs.org)]]
    4. [[https://clojuredocs.org/clojure.core/reset!][reset! clojure.core (clojuredocs.org)]]
*** Referencias Extraoficiales
    1. [[https://www.tutorialspoint.com/clojure/clojure_atoms_swap.htm][Atom and swap! (tutorialspoint.com)]]
    2. [[https://emanuelpeg.blogspot.com/2022/01/concurrencia-en-clojure.html][Concurrencia en Clojure (by Emanuel Goette)]]
    3. [[https://ericnormand.me/mini-guide/atom-code-explanation][Atom code explanation (ericnormand.me)]]
