#+TITLE: Variables
* def - Vincular/Bindear un valor a un nombre de variable
** Conceptos
    - ~def~ vincula/bindea *un valor* a un *nombre de variable*
    - ~def~ crea una *variable global* con *visibilidad* en todo un *Namespace*, una _variable definida por el usuario_
    - NO confundir con una *asignación*, ese concepto permite *multiples asignaciones*
    - similar al concepto de definir una *variable constante* ó *inmutable* (NO se puede alterar, ni cambiar su valor)
** Ejemplo Básico
*** Ejemplo con Variables
  #+BEGIN_SRC clojure
    ;; 1) vinculamos un nombre a una variable (una variable global con visibilidad en todo un namespace y definida por el usuario)
    ;;  - el nombre: capitan
    ;;
    ;; 2) vinculamos un string como valor a un símbolo (el símbolo referencia a un string)
    ;;   - el símbolo: capitan
    ;;   - el string: "Jean Luc Picard"
    (def capitan "Jean Luc Picard")

    ;; si evaluamos la siguiente s-expression (s-exp)
    ;; 1) el nombre capitan está vinculado a una variable (una variable global con visibilidad en todo un namespace y definida por el usuario)
    ;; 2) la variable referencia a un string "Jean Luc Picard"
    ;; 3) por tanto.. el símbolo capitan, es una variable que referencia a un string
    capitan

    ;; vinculamos un símbolo con un número entero como valor
    (def velocidad-warp 10)

    ;; si evaluamos la siguiente s-expression (s-exp)
    ;; 1) el nombre dificultad-de-navegacion está vinculado a una variable (una variable global con visibilidad en todo un namespace y definida por el usuario)
    ;; 2) la variable está vinculada al resultado de una función
    ;; 3) por tanto.. el símbolo dificultad-de-navegacion, es una variable que referencia a una función
    ;;
    ;; - el símbolo: dificultad-de-navegacion
    ;; - la función: (* 10 velocidad-warp)
    (def dificultad-de-navegacion (* 10 velocidad-warp))
  #+END_SRC
*** Ejemplo con funciones
  #+BEGIN_SRC clojure
    ;; 1) vinculamos un nombre a una función
    ;;  - el nombre: doble
    ;;
    ;; 2) vinculamos un nombre al "parámetro de una función nombrada"
    ;; - el nombre: numero
    ;; - función nombrada: doble
    ;;
    ;; 3) la función está vinculada al resultado de (* 2 numero)
    ;;
    ;; 4) pero..! el símbolo numero, es una "variable local" que referencia al "parámetro de una función"
    ;; (ésta es una variable local porque "vive sólo dentro del scope de la función" nombrada)
    (defn doble [numero]
      (* 2 numero))
  #+END_SRC
* Variable Shadowing
** Concepto
   - el concepto de ~shadowing~ ocurre cuando _definimos al menos dos variables con igual nombre en distintos scopes_ (ámbitos)
   - si dentro de una función referenciamos a una variable que existe en un scope superior (Ej. fuera de la función)
     - _la variable definida en el scope superior_ estará en la sombra de la *variable local* declarada en la función (en su cuerpo ó como parámetro)
     - _la variable local declarada como parámetro ó dentro de la función_ tendrá más prioridad de ser evaluada cuando se invoque/evalúe la función que la contiene

   #+BEGIN_QUOTE
   Lo siguiente puede estar en desorden, es sólo para organizar las ideas..
   1. En una función ~f~ definimos una *variable local* ~a~
   2. Definimos otra variable ~a~ pero en un *scope superior* (/fuera de la definición de la función/)
   3. Cuando usemos la variable ~a~ declarada en la función ~f~, ésta tendrá mayor prioridad que la del scope superior para ser evaluada

   Es decir el compilador usará el valor de la variable definida más cercana en el scope donde se esté,
   en el caso de una función, ésta dará prioridad a las variables locales de su scope (declaradas como parámetro ó dentro de la función)
   #+END_QUOTE
** Ejemplos
*** Ejemplo 1 - Parametros de una función Vs Variables Globales
   #+BEGIN_SRC clojure
     ;; "variable global" declarada por el usuario, con "visibilidad en todo el namespace"
     (def servidor "localhost")

     ;; "variable local" declarada como parámetro de una función,
     ;; ésta tiene "visibilidad unicamente dentro de la función" es decir
     ;;
     ;;  - en el cuerpo de la función
     ;;  - en el listado de los parámetros (porque un 2º ó 3º parámetro podría reutilizar su valor)
     (defn conectar-servidor [servidor]
       (str "Conectando al servidor " servidor "..."))

     ;; tendrá prioridad la variable local de la función (la declarada como parámetro)
     ;; por sobre la variable global
     (conectar-servidor "192.168.1.1")
   #+END_SRC
*** Ejemplo 2 - Variables definidas en Let Vs Variables Globales
   #+BEGIN_SRC clojure
     (def servidor "localhost")

     (defn conectar-servidor []
       (let [servidor "192.168.1.1"]
         (str "Conectando al servidor " servidor "...")))

     (conectar-servidor)
   #+END_SRC
** Referencias
*** Referencias Extraoficiales
    1. [[https://ericnormand.me/mini-guide/clojure-let][5 features of Clojure let (ericnormand.me)]]
    2. [[https://www.escuelafrontend.com/ambitos-de-javascript][Ambitos de JavaScript (escuelafrontend.com)]]
    3. [[https://www.tutorialspoint.com/what-is-variable-shadowing-in-javascript][What is Variable Shadowing in JavaScript (tutorialspoint.com)]]
    4. [[https://www.javatpoint.com/shadowing-in-java][Shadowing in java (javatpoint.com)]]
* Let
** Conceptos
   - _Crea un nuevo scope_, y prioriza el vínculo de las variables definidas en su scope
   - Permite aplicar el concepto de *Destructuring*
   - _Evalúa una expresión una única vez_ y _reutiliza el resultado_, muy útil en escenarios dónde
     1. si el obtener el resultado implíca llamar a una función costosa en términos de eficiencia/velocidad
     2. queremos generar efecto en la variable pero sólo dentro de let
** Ejemplos
*** Ejemplo 1 - Scope de Let
   #+BEGIN_SRC clojure
     ;; def
     ;; - bindeamos/enlazamos/vinculamos globalmente al nombre num al valor 1
     (def num 1)

     ;; let
     ;; - crea un nuevo scope/ámbito dentro del cuerpo de let
     ;; - let prioriza el vínculo de las variables definidas dentro de su scope, apesar de si ya existían en un scope superior
     ;; - bindeamos/enlazamos/vinculamos localmente al nombre num el valor 3
     (let [num 3] num)
   #+END_SRC
*** Ejemplo 2 - Bindear resultados de funciones
   #+BEGIN_SRC clojure
     (def personajes-marvel
       ["Iron Man" "Capitan America" "Hulk" "Doctor Doom" "Thor"])

     (defn juego-gratuito [jugador]
       ;; - "reutilizamos los valores de las variables locales" definidas dentro de let (Ej. max-personajes, datos en nombre)
       ;; aunque quizás para el nombre podríamos haber utilizado (get-in jugador [:datos :nombre]) ó bien.. (:nombre (:datos jugador))
       ;;
       ;; - la variable local personajes-marvel declarada dentro de let tiene mayor prioridad al momento de ser evaluada,
       ;; que la variable global personajes-marvel
       (let [datos (:datos jugador)
             nombre (:nombre datos)
             max-personajes 2
             personajes-marvel (take max-personajes personajes-marvel)]
         (print "Bienvenido" nombre "sólo puedes elegir entre estos personajes " personajes-marvel)))

     (defn juego-premium [jugador]
       ;; - definimos variables locales, que tienen "visibilidad sólo dentro el scope de let"  (de éste let)
       ;; estas variables locales viven en todo el ciclo de vida de let es decir.. cuando se termine de evaluar la última s-expression que contenga
       ;; (en éste caso la última s-expression es el print)
       ;;
       ;; - al definir estas variables locales, nos evitamos definir una variable global que tenga de lógica devolver tres elementos,
       ;; suponemos que no repite la lógica en otras funciones, y es sólo particular de ésta función jugar
       ;;
       ;; - bindeamos/enlazamos/vinculamos al nombre personajes-destacados,
       ;; el resultado de la expresión (take 3 personajes-marvel)
       (let [datos (:datos jugador)
             nombre (:nombre datos)]
         (print "Bienvenido" nombre "puedes elegir entre estos personajes " personajes-marvel)))

     (def David {:datos {:nombre "David", :edad 100, :email "david@mocosoft.com"}})

     (juego-gratuito David)
     (juego-premium David)
   #+END_SRC
*** Ejemplo 3 - Let + técnica Destructuring Bindings en un Vector
    #+BEGIN_SRC clojure
      ;; usamos el concepto de "Destructuring Bindings" en un Vector
      ;; al declarar los parámetros que recibe una función de la forma [[nombre1 nombre2 ..] [valor1 valor2 ...]]
      ;;
      ;;  - existen otras maneras más eficientes de utilizar "Destructuring Bindings", revisar tad-estructuras-de-datos.org
      ;;  - Clojure trata a los Vectores, las Listas (colección ordenada) y los Set (colección sin orden, sin elementos repetidos) como Secuencias
      ;;
      ;;  - la sintáxis es de la forma
      ;;
      ;;    1. [[param1 param2 ...] [valor1 valor2 ...]] si usamos un Vector
      ;;    2. [[param1 param2 ...] (list valor1 valor2 ..)] si usamos una Lista
      ;;    3. [{nombre1 :nombre1, nombre2 :nombre2} {:nombre1 valor1, :nombre2 valor}] si usamos una Estructura Map (se puede optimizar con la clave especial :keys)
      ;;
      ;;  - bindeamos/vinculamos múltiples valores de una Secuencia (del lado derecho) a un Vector de nombres (del lado izquierdo)
      ;;  - "el orden de los elementos" de la Secuencia (del lado derecho) y del Vector de nombres (del lado izq.) es fundamental
      ;;  - si.. el vector de nombres (del lado izq) tiene más elementos que la Secuencia, esos elementos del Vector se los vinculará con el valor nil
      ;;
      (let [[id _ name city] [101 "steve@mocosoft.com" "Steve" "New York City"]]
        (println (str "Bienvenido " name ", nuestro equipo de " city " ya agendamos tu ID " id " y luego te contactará")))

      ;; - éste otro ejemplo es similar al anterior, pero NO estamos aplicando la técnica de "Destructuring Bindings"
      ;; y nos damos cuenta porque es de la forma [nombre1 valor1, nombre2 valor2, ..]
      ;; y por tanto NO es de la forma [[nombre1 nombre2 ..] [valor1 valor2 ...]]
      ;;
      ;; - declaramos cada variable como parámetro de let y a cada una le bindeamos/vinculamos un valor
      (let [id 101,
            name "Steve",
            email "steve@mocosoft.com"
            city "New York City"]
        (println (str "Bienvenido " name ", nuestro equipo de " city " ya agendamos tu ID " id " y luego te contactará")))

      ;; un refactor del primer escenario
      (def cliente [101 "Steve" "steve@mocosoft.com" "New York City"])

      (let [[id name _ city] cliente]
        (println (str "Bienvenido " name ", nuestro equipo de " city " ya agendamos tu ID " id " y luego te contactará")))
    #+END_SRC
*** Ejemplo 3 - Let + técnica Destructuring Bindings en un Vector + Parameter Rest
    #+BEGIN_SRC clojure
      ;; - usamos el concepto de "Parameter Rest" como si fuera una "Función Variádica"
      ;; - una "Función Variádica" recibe una "cantidad indefinida de parámetros"
      ;; - el "Rest Parameter" es una variable que "contiene una lista con resto de los parámetros como elementos"
      (let [[serie-mas-vista & series-menos-vistas] ["foundation" "Glitch" "Avenue" "Cosmos"]]
        (println (str "La serie más vista es " serie-mas-vista)))

      ;; refactor de ejemplo anterior
      (def tv-series ["foundation" "Glitch" "Avenue" "Cosmos"])

      (let [[serie-mas-vista & series-menos-vistas] tv-series]
        (println (str "La serie más vista es " serie-mas-vista)))
    #+END_SRC
