#+TITLE: Colecciones
* Conceptos
* Into
** Conceptos
   - ~into~ inserta elementos en la 1º estructura los elementos de la 2º estructura
** Ejemplos
*** Ejemplo 1 - Insertar elementos de una estructura en otra del mismo tipo
    #+BEGIN_SRC clojure
      ;; inserciones más comunes

      ;; agregamos en el 1º map <- los elementos del 2º map
      (into {:nombre "picard"} {:edad 45 :rango "capitan"})

      ;; agregamos en el 1º vector <- los elementos del 2º vector
      (into ["carlos"] ["perez" "samuel"])

      ;; agregamos en la 1º lista <- los elementos de la 2º lista
      (into '("carlos") '("perez" "samuel"))
    #+END_SRC
*** Ejemplo 2 - Insertar elementos entre estructuras diferentes
    #+BEGIN_SRC clojure
      ;; inserciones que uno no esperaría que funcionen pero funcionan :)

      ;; agregamos en el vector <- los elementos de la lista
      (into ["carlos"] '("perez" "samuel"))

      ;; agregamos en la lista <- los elementos del vector
      (into '("carlos") ["perez" "samuel"])
    #+END_SRC
* Conj
** Conceptos
   - ~conj~ inserta en una estructura (1º parámetro) un conjunto de valores (2º,3º,..., n parámetros)
** Ejemplos
*** Ejemplo 1 - Insertar un elemento en una estructura
    #+BEGIN_SRC clojure
      ;; agregamos en un vector vacío el valor 1
      (conj [] 1)

      ;; agregamos en una lista vacía el valor 1
      (conj '() 1)
    #+END_SRC
*** Ejemplo 2 - Insertar varios elementos en una estructura
    #+BEGIN_SRC clojure
      ;; en estos ejemplos se ve mejor que luego del 1º parámetro (la estructura)
      ;; los siguientes valores serían el rest parameter
      (conj [0] 1 2 3 4)
      (conj '(0) 1 2 3 4)
      (conj #{0} 1 2 3 4)
    #+END_SRC
*** Ejemplo 3 - Diferenciar las funciones into y conj
    #+BEGIN_SRC clojure
      ;; el resultado de ambos es el mismo, la manera de hacerlo es diferente
      (conj [] 1)
      (into [] [1])

      ;; el resultado de ambos es el mismo, la manera de hacerlo es diferente
      (conj [0] 1 2 3)
      (into [0] [1 2 3])
    #+END_SRC
*** Ejemplo 4 - Implementar la función conj
    #+BEGIN_SRC clojure
      (conj [0] 1 2 3)

      (into [0] [1 2 3])

      ;; como conj agrega en una estructura (1º parámetro), un conjunto de valores (2º,3º,..,nº parametros siguientes)
      ;; 1. usamos el rest parameter que agrupa un conjunto indefinido de parámetros
      ;; 2. usamos into que agrega en una estructura (1º parámetro) los elementos de otra estructura (2º parámetro)
      (defn my-conj
        [estructura & elementos]
        (into estructura elementos))

      (my-conj [0] 1 2 3)
    #+END_SRC
